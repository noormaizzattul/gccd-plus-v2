/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Dimension;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import static java.lang.System.arraycopy;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLabel;
import java.lang.Math;

/**
 * Tool: GCCD+
 * Version: 2
 */
public class TokenBeta extends javax.swing.JFrame {

    static String newLine = System.getProperty("line.separator"); ////This will retrieve line separator dependent on OS.
    static String preSeconds; //for preprocessing
    static String transSeconds; //for transformation
    static String paraSeconds; //for transformation
    static String poolSeconds; //for pool
    static String preDetectSeconds; //for predetect
    static String detectSeconds; //for predetect
    static float seconds = 0; // for preprocessing
    static float secondstemp; // for preprocessing
    static float seconds2 = 0; // for transformation
    static float secondstemp2; // for transformation
    static float seconds3 = 0; // for parameterize
    static float secondstemp3; // for parameterize

    static float seconds5 = 0; // 
    static float secondstemp5; // 
    static float seconds6 = 0; // 
    static float secondstemp6; // 

    static String pr1 = "Package and Import Statements...not done" + newLine; //holds result pr
    static String pr2 = "Comments removal...not done" + newLine; //holds result pr
    static String pr3 = "Emptyline removal...not done"; //holds result pr
    
    static String tr1 = "Keywords regularization...not done" + newLine; //holds result tr
    static String tr2 = "Function regularization...not done" + newLine; //holds result tr
    static String tr3 = "Convertion to lowercase...not done"; //holds result tr
    //create files array that can store 1000 files at max
    static File[] files = new File[1000];
    static boolean determiner = false; //to stop execution in PartOneTokenizeJavaFile.main before selecting files in FileChooser
    static String transText = ""; //string to hold transformation text
    static String paraText = ""; //string to hold parameterization text
    static String tempLine = ""; // to hold string for readline to change to lowercase
    static String readline = "";
    static int countLine = 0;
    static String stringFiles ="";
    static Double[][] ratioA = new Double[10000][2000];
    static Double[][] ratioB = new Double[10000][2000];
    static String[] arrayA = new String[10000]; 
    static String[] arrayB = new String[10000]; 
    static String[] arrayACopy = new String[10000]; 
    static String[] arrayBCopy = new String[10000]; 
    
    static int[][] groupA = new int[10000][2000];
    static int[][] groupB = new int[10000][2000];
    static int[][] groupACopy = new int[10000][2000];
    static int[][] groupBCopy = new int[10000][2000];
    
    static int[] groupC = new int[10000]; //for type 1
    static Double ratio = 161815200503200.504;
    static int globalLineNum = 0;
    static String searchValueA = "";
    static String searchValueB = "";
    static int numberA [] = new int [10000];
    static int numberB []=  new int [10000];
    static int noA = 0;
    static int noB = 0;
    static int noType2A = 0;
    static int noType2B = 0;
    
    static String[] class1A = new String [10000];
    static String[] class1B = new String [10000];
    static String[] type1and2 = new String [10000];
    static int linecount = 0; // to count no of line
    static double distanceQ = 0.00;
    static double distanceP = 0.00;
  
 
    
    /**
     * 
     * Creates new form TokenBeta
     */
    public TokenBeta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jProgressBar3 = new javax.swing.JProgressBar();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea9 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea10 = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea11 = new javax.swing.JTextArea();
        jProgressBar4 = new javax.swing.JProgressBar();
        jProgressBar5 = new javax.swing.JProgressBar();
        jButton6 = new javax.swing.JButton();
        jProgressBar6 = new javax.swing.JProgressBar();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea12 = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextArea13 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Al Fahim V.1"));

        jButton1.setText("Pre-process");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        jButton2.setText("Transform");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });

        jButton3.setText("Parameterize");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });

        jButton4.setText("Pool");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton4MousePressed(evt);
            }
        });

        jButton5.setText("Pre-Detect");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton5MousePressed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane5.setViewportView(jTextArea5);

        jLabel1.setText("Run Time:");

        jLabel2.setText("Run Time:");

        jLabel7.setText("Run Time:");

        jLabel8.setText("Run Time:");

        jLabel10.setText("Run Time:");

        jTextArea6.setColumns(20);
        jTextArea6.setRows(5);
        jScrollPane6.setViewportView(jTextArea6);

        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jScrollPane7.setViewportView(jTextArea7);

        jTextArea8.setColumns(20);
        jTextArea8.setRows(5);
        jScrollPane8.setViewportView(jTextArea8);

        jTextArea9.setColumns(20);
        jTextArea9.setRows(5);
        jScrollPane9.setViewportView(jTextArea9);

        jLabel3.setText("A");

        jLabel4.setText("B");

        jTextArea10.setColumns(20);
        jTextArea10.setRows(5);
        jScrollPane10.setViewportView(jTextArea10);

        jTextArea11.setColumns(20);
        jTextArea11.setRows(5);
        jScrollPane11.setViewportView(jTextArea11);

        jButton6.setText("Detect");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton6MousePressed(evt);
            }
        });

        jTextArea12.setColumns(20);
        jTextArea12.setRows(5);
        jScrollPane12.setViewportView(jTextArea12);

        jLabel11.setText("Run Time:");

        jTextArea13.setColumns(20);
        jTextArea13.setRows(5);
        jScrollPane13.setViewportView(jTextArea13);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane7)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane2)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane9))
                        .addComponent(jScrollPane6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jProgressBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jProgressBar5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jProgressBar6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addComponent(jScrollPane12)))
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextField1, jTextField2, jTextField3, jTextField4});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2, jScrollPane3, jScrollPane5});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addComponent(jScrollPane10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jProgressBar5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(jScrollPane11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jProgressBar6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane13)))
                .addGap(81, 81, 81))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jProgressBar1, jProgressBar2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed

        try {
            Thread.sleep(500); //sleep 500 milliseconds to wait for progress bar
            jProgressBar2.setValue(50);
            Thread.sleep(1500); //sleep 1000 milliseconds to wait for progress bar
            jProgressBar2.setValue(100);
            //1000 milliseconds is one second sleep.
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        for (File listOfFile : files) {
            
            if (listOfFile.isFile()) { //check selected file one by one
                stringFiles = listOfFile.getPath();
                
                if (stringFiles.endsWith(".java")) {
                    // Read file
                                          
                    
                    try {
                        File source2 = new File(stringFiles + ".txt");
                        File temp2 = new File(stringFiles + "trans.txt");
                        
                        FileReader fr2 = new FileReader(source2);
                        BufferedReader in2 = new BufferedReader(fr2);
                        
                        FileWriter fw2 = new FileWriter(temp2);
                        BufferedWriter out2 = new BufferedWriter(fw2);
                        
                        
                        boolean eof = false;
                        do {
                            readline = in2.readLine();
                            
                            
                            if (readline != null) {
                                
                                //   Transformation rules --- Start
                                
                                long transStartTime = System.currentTimeMillis();  //calculate current time for transformation
                                
                                tempLine = readline.toLowerCase();  //change all to lower case
                                readline = tempLine; //copy tempLine to readline
                                tr3 = "Convertion to lowercase...done";
                                
                                
                                if (readline.contains("String") || readline.contains("String ") ) {
                                    readline = readline.replace("String", "[S]");  // Remove String with [S]
                                    readline = readline.replace("String ", "[S] ");
                                    tr1 = "Keywords regularization...done" + newLine;
                                }
                                if (readline.contains("int ")) // Remove int with [I]
                                {
                                    readline = readline.replace("int ", "[I] ");
                                    tr1 = "Keywords regularization...done" + newLine;
                                }
                                if (readline.contains("char ")) {
                                    readline = readline.replace("char ", "[C] ");  // Remove char with [C]
                                    tr1 = "Keywords regularization...done" + newLine;
                                }
                                if (readline.contains("double ")) {
                                    readline = readline.replace("double ", "[D] ");  // Remove double with [D]
                                    tr1 = "Keywords regularization...done" + newLine;
                                }
                                if (readline.contains("float ")) {
                                    readline = readline.replace("float ", "[F] ");  // Remove float with [F]
                                    tr1 = "Keywords regularization...done" + newLine;
                                }
                                if (readline.contains("protected ")) {
                                    readline = readline.replace("protected ", "public "); // Standardize access function to public
                                    tr2 = "Functions regularization...done" + newLine;
                                }
                                if (readline.contains("private ")) {
                                    readline = readline.replace("private ", "public ");  // Standardize access function to public
                                    tr2 = "Functions regularization...done" + newLine;
                                }
                                
                                
                                if (readline.startsWith("public")) {
                                    
                                    
                                    countLine = countLine + 1;
                                    
                                    readline = readline.replace(" = ", " ");
                                    readline = readline.replace("=", " ");
                                    
                                    readline = readline.replace(" () ", " ");
                                    readline = readline.replace("()", " ");
                                    
                                    readline = readline.replace(" ( ", " ");
                                    readline = readline.replace("(", " ");
                                    
                                    readline = readline.replace(" ) ", " ");
                                    readline = readline.replace(")", " ");
                                    
                                    readline = readline.replace(" , ", " ");
                                    readline = readline.replace(",", " ");
                                    
                                    readline = readline.replace(" . ", " ");
                                    readline = readline.replace(".", " ");
                                    
                                    readline = readline.replace(" _ ", " ");
                                    readline = readline.replace("_", " ");
                                    
                                    readline = readline.replace(" ! ", " ");
                                    readline = readline.replace("!", " ");
                                    
                                    readline = readline.replace(" < ", " ");
                                    readline = readline.replace("<", " ");
                                    
                                    readline = readline.replace(" > ", " ");
                                    readline = readline.replace(">", " ");
                                    
                                    readline = readline.replace(" && ", " ");
                                    readline = readline.replace("&&", " ");
                                    
                                    readline = readline.replace(" & ", " ");
                                    readline = readline.replace("&", " ");
                                    
                                    readline = readline.replace(" == ", " ");
                                    readline = readline.replace("==", " ");
                                    
                                    readline = readline.replace(" ; ", " ");
                                    readline = readline.replace(";", " ");
                                    
                                    readline = readline.replace(" [] ", " ");
                                    readline = readline.replace("[]", " ");
                                                                       
                                    readline = readline.replace(" + ", " ");
                                    readline = readline.replace("+", " ");
                                    
                                    readline = readline.replace(" \\ ", " ");
                                    readline = readline.replace("\\", " ");
                                    
                                    readline = readline.replace(" ' ", " ");
                                    readline = readline.replace("'", " ");
                                    
                                    readline = readline.replace(" @ ", " ");
                                    readline = readline.replace("@", " ");
                                    
                                    readline = readline.replace(" : ", " ");
                                    readline = readline.replace(":", " ");
                                    
                                    readline = readline.replace(" # ", " ");
                                    readline = readline.replace("#", " ");
                                    
                                    readline = readline.replace(" + ", " ");
                                    readline = readline.replace("+", " ");
                                    
                                    readline = readline.replace(" - ", " ");
                                    readline = readline.replace("-", " ");
                                    
                                    readline = readline.replace("\"", " ");
                                    
                                    
                                    if (readline.endsWith("}") ) //to remove } in middle of line only
                                    {
                                        readline = readline.replace("}", " ");  //remove all }
                                        readline = readline + "}";     //add back } at end of line
                                    }
                                    
                                    
                                    readline = readline.replace("[S]", "31");
                                    readline = readline.replace("[I]", "32");
                                    readline = readline.replace("[C]", "33");
                                    readline = readline.replace("[D]", "34");
                                    readline = readline.replace("[F]", "35");
                                    readline = readline.replace("[s]", "31");
                                    readline = readline.replace("[i]", "32");
                                    readline = readline.replace("[c]", "33");
                                    readline = readline.replace("[d]", "34");
                                    readline = readline.replace("[f]", "35");
                                    
                                    readline = readline.replace(" [ ", " "); //put after {S] to avoid wrong transform
                                    readline = readline.replace("[", " ");
                                    
                                    readline = readline.replace(" ] ", " ");
                                    readline = readline.replace("]", " ");
                                    
                                    
                                    readline = readline.replace("a", "01");
                                    readline = readline.replace("b", "02");
                                    readline = readline.replace("c", "03");
                                    readline = readline.replace("d", "04");
                                    readline = readline.replace("e", "05");
                                    readline = readline.replace("f", "06");
                                    readline = readline.replace("g", "07");
                                    readline = readline.replace("h", "08");
                                    readline = readline.replace("i", "09");
                                    readline = readline.replace("j", "10");
                                    readline = readline.replace("k", "11");
                                    readline = readline.replace("l", "12");
                                    readline = readline.replace("m", "13");
                                    readline = readline.replace("n", "14");
                                    readline = readline.replace("o", "15");
                                    readline = readline.replace("p", "16");
                                    readline = readline.replace("q", "17");
                                    readline = readline.replace("r", "18");
                                    readline = readline.replace("s", "19");
                                    readline = readline.replace("t", "20");
                                    readline = readline.replace("u", "21");
                                    readline = readline.replace("v", "22");
                                    readline = readline.replace("w", "23");
                                    readline = readline.replace("x", "24");
                                    readline = readline.replace("y", "25");
                                    readline = readline.replace("z", "26");
                                    
                                    tempLine = readline.replaceAll("\\s+", " ");
                                    readline = tempLine;
                                    
                                    transText = transText + readline + newLine;
                                    //                     for (int i = 0; i < readline.length(); i++) {
                                    //
                                    
                                    long transEndTime = System.currentTimeMillis(); //calculate end time of inner loop of transformation
                                    secondstemp2 = (transEndTime - transStartTime); //hold temporary time for transformation
                                    seconds2 = seconds2 + secondstemp2; //adds all transformation time in the loop
                                    
                                    if (readline.startsWith("162102120903")) {
                                        
                                        out2.write (newLine); // Add separator for line write
                                        out2.write (newLine); // Add separator for line write
                                    }
                                    //
                                }
                                
                                
                                // Transformation rules -- End
                                
                                
                                out2.write(readline);
                            } else
                                eof = true;
                        } while (!eof);
                        
                        in2.close();
                        out2.close();
                        
                        boolean deleted = source2.delete();
                        if (deleted)
                            temp2.renameTo(source2);
                    } catch (Exception se) {
                        System.out.println("Error - " + se.toString());
                    }

                    // Read line by line.
                    
                }
                DecimalFormat df = new DecimalFormat("#.####"); //set decimal format to 4
//                preSeconds = df.format(seconds); //convert float seconds to string
                transSeconds = df.format(seconds2); //convert float seconds2 to string

                
                //to write parameterization code
                
                
                
                
            }
            
            
            
        }
        
        
        jTextArea2.append(tr1); //display to textarea1
        jTextArea2.append(tr2);
        jTextArea2.append(tr3);        
        jTextArea7.append(transText); //display latest code up down on text area 6
        
        jTextField2.setText(transSeconds + " milliseconds."); //display the running time for pre-processing
        
    }//GEN-LAST:event_jButton2MousePressed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed

        //Make the jframe that hold the filechooser visible
        JFrame frame = new MainClass();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.pack();
        frame.setVisible(true);
        determiner = true;

    }//GEN-LAST:event_jButton1MousePressed

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
            
        int lineNum = 0; // to record the number of lines involved
                
        for (File listOfFile : files) {
            
            if (listOfFile.isFile()) { //check selected file one by one
                stringFiles = listOfFile.getPath();
                
                if (stringFiles.endsWith(".java")) {
                    // Read file

                    
                    try {
                        File source3 = new File(stringFiles + ".txt");
                        
                        FileReader fr3 = new FileReader(source3);
                        BufferedReader in3 = new BufferedReader(fr3);
                        

                        
                        
                        boolean eof = false;
                        do {
                            readline = in3.readLine();

                            
                            if (readline != null) {
                                
                                //   parameterization rules --- Start
                                
                                long paraStartTime = System.currentTimeMillis();  //calculate current time for transformation

                                
                                if (readline.startsWith("162102120903")) {
                                    
                                    String[] parts = new String[2]; //to hold A and B
                  
                                      int i = 0;
                                      for (String retval: readline.split("\\{", 2)){
                                          
                                              parts[i] = retval; //takes value A and B
                                                                                     
                                              int count = 0;                             //to count no of words
                                              for(int e = 0; e < retval.length(); e++){
                                              if(retval.charAt(e) != ' '){
                                              count++;
                                              while(retval.charAt(e) != ' ' && e < retval.length()-1){
                                              e++;
                                              }
                                              }
                                              }

                                              if(i == 0)    //means before {, thus is A
                                              {
                                                   
                                                  retval = retval.replace("}", " ");
                                                  retval = retval.replace("{", " ");
                                                  retval = retval.replace("|", " ");
                                                  retval = retval.replace("(", " ");
                                                  retval = retval.replace(")", " ");
                                                  retval = retval.replace("’", " ");
                                                  retval = retval.replace("?"," ");
                                                  retval = retval.replace("/"," ");
                                                  retval = retval.replace("`"," ");
                                                  retval = retval.replace("$"," ");
                                                  retval = retval.replace("^"," ");
                                                  retval = retval.replace("~"," ");
                                                  retval = retval.replace("%"," ");
                                                  retval = retval.replace("”"," ");
                                                  
                                                  retval = retval.replace("public"," ");
                                                  retval = retval.replace("void"," ");
                                                  retval = retval.replace("return"," ");
                                                  retval = retval.replace("short"," ");
                                                  retval = retval.replace("static"," ");
                                                  retval = retval.replace("switch"," ");
                                                  retval = retval.replace("strictfp"," ");
                                                  retval = retval.replace("hack"," ");
                                                  retval = retval.replace("final"," ");
                                                  retval = retval.replace("this"," ");
                                                  retval = retval.replace("abstract"," ");
                                                  retval = retval.replace("if"," ");
                                                  retval = retval.replace("synchronized"," ");
                                                  retval = retval.replace("mod"," ");
                                                  
                                                  retval = retval.trim().replaceAll(" +", " "); //remove more than single " "

                                                  parts[i] = parts[i].replace("}", " "); //remove } because { already removed
                                                  parts[i] = parts[i].replace("{", " "); //remove } because { already removed
                                                  parts[i] = parts[i].trim();
                                                  jTextArea8.append(parts[i] + newLine); //display in box A
                                                  jTextArea8.append("No of words is : " + count + newLine); 
                                                  
                                                  //to separate the words and put into array for calculation of average ratio
                                                  int j = 0;
                                                  double tempA = 0;
                                                  if(count != 0)
                                                  {
                                                  for (String split: retval.split(" ")){
                                                      split = split.replaceAll("\\D+",""); // regex : only takes numerical value
                                                      ratioA[lineNum][j] = (Double.parseDouble(split)/ 1000 / 161815200503200.504); //divide by 1000 to reduce ratio length, then divide by protected value/1000 to get ratio
                                                      tempA = tempA + ratioA[lineNum][j]; //add total ratio
                                                      j++;
                                                  }
                                                  }
                                                  
                                                  if(count != 0)
                                                  {

                                                      DecimalFormat df = new DecimalFormat("0.00"); //format to 2 decimals
                                                      arrayA[lineNum] = df.format(tempA/count); //change to string
 

                                                  }
                                                  
                                                  else
                                                  {
                                                      arrayA[lineNum] = "0.00";
                                                  }
                                                  
                                                     //calculate average ratio
                                                  jTextArea8.append("average ratio A is : " + arrayA[lineNum] + newLine + newLine); 
    
                                                  
                                              }
                                              else         //means after {, thus is B
                                              {
                                                    
                                                  retval = retval.replace("}", " ");
                                                  retval = retval.replace("{", " ");
                                                  retval = retval.replace("|", " ");
                                                  retval = retval.replace("(", " ");
                                                  retval = retval.replace(")", " ");     
                                                  retval = retval.replace("’", " ");
                                                  retval = retval.replace("?"," ");
                                                  retval = retval.replace("/"," ");
                                                  retval = retval.replace("`"," ");
                                                  retval = retval.replace("$"," ");
                                                  retval = retval.replace("^"," ");
                                                  retval = retval.replace("~"," ");
                                                  retval = retval.replace("%"," ");
                                                  retval = retval.replace("”"," ");
                                                  
                                                  retval = retval.replace("public"," ");
                                                  retval = retval.replace("void"," ");
                                                  retval = retval.replace("return"," ");
                                                  retval = retval.replace("short"," ");
                                                  retval = retval.replace("static"," ");
                                                  retval = retval.replace("switch"," ");
                                                  retval = retval.replace("strictfp"," ");
                                                  retval = retval.replace("hack"," ");
                                                  retval = retval.replace("final"," ");
                                                  retval = retval.replace("this"," ");
                                                  retval = retval.replace("abstract"," ");
                                                  retval = retval.replace("if"," ");
                                                  retval = retval.replace("synchronized"," ");
                                                  retval = retval.replace("mod"," ");
                                                  
                                                  retval = retval.trim().replaceAll(" +", " "); //remove more than single " "
                                                  
                                                  parts[i] = parts[i].replace("}", " "); //remove } because { already removed
                                                  parts[i] = parts[i].replace("{", " "); //remove } because { already removed
                                                  parts[i] = parts[i].trim();
                                                  jTextArea9.append(parts[i] + newLine); //display in box B
                                                  jTextArea9.append("No of words is : " + count + newLine); 
                                                  
                                                  //to separate the words and put into array for calculation of average ratio
                                                  int j = 0;
                                                  double tempB = 0;
                                                  if(count != 0) //only split the word if the number of words more than 0
                                                  {
                                                      for (String split: retval.split(" ")){
                                                      split = split.replaceAll("\\D+","");  // regex : only takes numerical value
                                                      ratioB[lineNum][j] = (Double.parseDouble(split)/ 1000 / 161815200503200.504); //protected weightage
                                                      tempB = tempB + ratioB[lineNum][j]; //add total ratio
                                                      j++;
                                                  } 
                                                  }
                                                  
                                                  if(count != 0)
                                                  {
                                                      
                                                      DecimalFormat df = new DecimalFormat("0.00"); //format to 2 decimals
                                                      arrayB[lineNum] = df.format(tempB/count); //change to string
 
                                                  }
                                                  
                                                  else{

                                                      arrayB[lineNum] = "0.00";

                                                  }

                                                  //calculate average ratio   
                                                  jTextArea9.append("average ratio B is : " + arrayB[lineNum] + newLine + newLine); 
    
                                              }
                                              i++;
                                          }

                                lineNum++;
                                    
                                }
                                
                                long paraEndTime = System.currentTimeMillis();
                                secondstemp3 = (paraEndTime - paraStartTime); //hold temporary time for preprocessing
                                seconds3 = seconds3 + secondstemp3; //adds all preprocessing time in the loop
                                
                            }else
                                eof = true;
                        }while (!eof);
                        
                        
                    } catch (Exception se) {
                        System.out.println("Error - " + se.toString());
                    }
                }
            }
            }
                DecimalFormat df = new DecimalFormat("#.####"); //set decimal format to 4
                paraSeconds = df.format(seconds3); //convert float seconds2 to string
                jTextArea3.append("Detection of A...done "+ newLine);
                jTextArea3.append("Detection of B...done : "+ newLine);
                jTextArea3.append("Separating A and B...Done : "+ newLine);
                jTextField3.setText(paraSeconds + " milliseconds."); //display the running time for pre-processing
                jProgressBar3.setValue(100);
                globalLineNum = lineNum;
                System.out.println("line Num is : " + lineNum);
    }//GEN-LAST:event_jButton3MousePressed

    private void jButton4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MousePressed
        //group all similar A & B
             long poolStartTime = System.currentTimeMillis();  //calculate current time for pool

        for(int j = 0;j <= globalLineNum; j++)
        {
            int init1 = 0;
            int init2 = 0;
            searchValueA = arrayA[j];      //ok
            searchValueB = arrayB[j]; 
 
            
            for (int k = 0;k <= globalLineNum; k++)
            {
                //for A
                if(searchValueA != null && arrayA[j] != null && searchValueA.equals(arrayA[k]) && j!=k) // A match
                {
                    groupA[j][init1] = k;
                    init1++;
                    numberA[j]++;   //knows how many similar for each line
                    noA++; //just to know the number of total pooled A

                }
              
                    //for B
                if(searchValueB != null && arrayB[j] != null && searchValueB.equals(arrayB[k]) && j!=k) // B match
                {
                    groupB[j][init2] = k;
                    init2++;
                    numberB[j]++;  //knows how many similar for each line
                    noB++; //just to know the number of total pooled AB

                }
                
            }
            

        }
        
                long poolEndTime = System.currentTimeMillis();  //calculate current time for pool
                DecimalFormat df = new DecimalFormat("#.####"); //set decimal format to 4
                poolSeconds = df.format(poolEndTime - poolStartTime); //convert float seconds2 to string
                
//printout the similar value
        
        for(int j = 0;j <= globalLineNum; j++)
        {
            int m = j+1; //so that the first line is 1

            for (int k = 0;k < numberA[j]; k++)
            {
                  
                  jTextArea10.append("A match for line " + m +" is : "+ groupA[j][k] + newLine);  
            }
            
            for (int k = 0;k < numberB[j]; k++)
            {
                  jTextArea10.append("B match for line " + m + " is : "+ groupB[j][k] + newLine); 
            }
            
        }
        jTextArea4.append("Matching and Pooling in A...done "+ newLine);
        jTextArea4.append("Matching and Pooling in B...done : "+ newLine);
        jTextArea10.append("Total No of Pooled A : "+ noA + newLine);
        jTextArea10.append("Total No of Pooled B : "+ noB);
        jTextField4.setText(poolSeconds + " milliseconds."); //display the running time for pre-processing       
        jProgressBar4.setValue(100);
        
    }//GEN-LAST:event_jButton4MousePressed

    private void jButton5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MousePressed
        long preDetStartTime = System.currentTimeMillis();  //
   
        System.arraycopy(arrayA,0,arrayACopy,0,arrayA.length); //makes a copy of arrayA
        System.arraycopy(arrayB,0,arrayBCopy,0,arrayB.length); //makes a copy of arrayB
        System.arraycopy(groupA,0,groupACopy,0,groupA.length); //makes a copy of arrayA
        System.arraycopy(groupB,0,groupBCopy,0,groupB.length); //makes a copy of arrayB   

        int init1 = 0;    //detecting type 1
        int pair1 = 0;
        int temp1 = 0;
        int temp2 = 0;
        int c1 = 0;
        int classT1 = 0;
        
        try{
            File temp3 = new File("C: Type1.txt");   //write to file 
            
            FileWriter fw3 = new FileWriter(temp3);
            BufferedWriter out3 = new BufferedWriter(fw3);
        
            
        for(int j = 0;j <= globalLineNum; j++)
        {



            
                searchValueA = arrayA[j];     
                searchValueB = arrayB[j]; 
                
            for (int k = 0;k <= globalLineNum; k++)
            {
                //Detect type 1
                if(searchValueA != null && arrayA[k] != null && searchValueB != null && arrayB[k] != null && searchValueA.equals(arrayA[k]) && searchValueB.equals(arrayB[k]) && j!= k && !(arrayA[k].equals("")) && !(arrayB[k].equals(""))) // A match
                {
                    groupC[init1] = j;   //keep the line no of type 1
                    out3.write(searchValueA+newLine);    //write A to file
                    out3.write(arrayA[k]+newLine);    //write A to file
                    
                    type1and2[linecount] = Integer.toString(j)+" "+Integer.toString(k);
                    linecount++;
                    arrayA[k] = "";  //so not detect twice
                    
                    init1++;
                    groupC[init1] = k;
                    
                    out3.write(searchValueB+newLine);    //write A to file                   
                    out3.write(arrayB[k]+newLine+newLine);    //write B to file
                    
                    arrayB[k] = "";   //so not detect twice
                    init1++;
                    pair1++;
                    
                    class1A[c1] = searchValueA; //to count how many class are there
                    class1B[c1] = searchValueB;

                    c1++;

                    
                }
                              
            }
            
        }
        
        out3.close();
            
        } catch (Exception se) {
        System.out.println("Error - " + se.toString());
        
        }

        int cTemp = c1;
        
        for(int p = 0; p <= c1; p++)
        {
            searchValueA = class1A[p];     
            searchValueB = class1B[p]; 
            
            for(int q = 0; q <= c1; q++)
            {
                    if(searchValueA != null && class1A[q] != null && searchValueB != null && class1B[q] != null && searchValueA.equals(class1A[q])&&searchValueB.equals(class1B[q])&& q != p && !class1A[q].equals(""))
                    {
                        cTemp--;
                        class1A[q] = "";
                    }
                    
            }
        }
        

        DecimalFormat df2 = new DecimalFormat("#.##"); //set decimal format to 2

        double pctg1 = ((double)init1/(double)globalLineNum) *100; //must change to double first
        jTextArea5.append("Pre-Detection of Type 1...done "+ newLine);        
        jTextArea11.append("Total lines of Type 1 : "+ init1 + " (" + df2.format(pctg1) + "%)" + newLine);
        jTextArea11.append("Total pairs of Type 1 : "+ pair1 + newLine);
        jTextArea11.append("Total class of Type 1 : "+ cTemp + newLine);
        
        try{
            File temp4 = new File("C: Type2ASame.txt");   //write to file 
            
            FileWriter fw4 = new FileWriter(temp4);
            BufferedWriter out4 = new BufferedWriter(fw4);
        
        for(int j = 0;j <= globalLineNum; j++) //detectting type2 (A same)
        {
            
              temp1 = j;
            
            for (int k = 0;k <= numberA[j]; k++)
            {
 
       
                temp2 = groupA[j][k];

                
                //for A
                if(arrayBCopy[j] != null && arrayBCopy[temp2] != null)
                {
                if(!arrayBCopy[j].equals(arrayBCopy[temp2]) && temp2 != 0)
                {
                    noType2A++;
                    
                    fw4.write(arrayACopy[j]+ newLine);
                    fw4.write(arrayACopy[temp2]+ newLine);
                    fw4.write(arrayBCopy[j]+ newLine);
                    fw4.write(arrayBCopy[temp2]+ newLine+ newLine);   
                    type1and2[linecount] = Integer.toString(j)+" "+Integer.toString(temp2);
                    linecount++;
                    
                  
                    for (int l = 0; l <= globalLineNum; l++)
                    {
                        for (int m = 0; m <= numberA[l]; m++)
                        {
                                if(groupA[l][m] == temp1 || groupA[l][m] == temp2)
                                groupA[l][m] = 0;
                        }
                    }
                    
                 }                      
                }       
                
                
            }
            
            

        }
        
        out4.close();
            
        } catch (Exception se) {
        System.out.println("Error - " + se.toString());
        
        }
        
        double pctg2A = ((double)noType2A/(double)globalLineNum) *100; //must change to double first
        
        jTextArea5.append("Pre-Detection of Type 2 (similar A)...done "+ newLine);  
        jTextArea11.append("Total pairs of Type 2 (similar A) : "+ noType2A + newLine);
        
        try{
            File temp5 = new File("C: Type2BSame.txt");   //write to file 
            
            FileWriter fw5 = new FileWriter(temp5);
            BufferedWriter out5 = new BufferedWriter(fw5);
        
        
        for(int j = 0;j <= globalLineNum; j++) //detectting type2 (B same)
        {
            
              temp1 = j;
            
            for (int k = 0;k <= numberB[j]; k++)
            {
 
       
                temp2 = groupB[j][k];

                
                //for A
                if(arrayACopy[j] != null && arrayACopy[temp2] != null)
                {
                if(!arrayACopy[j].equals(arrayACopy[temp2]) && temp2 != 0 && !arrayBCopy[j].equals("0.00"))
                {
                    noType2B++;
                    
                    fw5.write(arrayACopy[j]+ newLine);
                    fw5.write(arrayACopy[temp2]+ newLine);    
                    fw5.write(arrayBCopy[j]+ newLine);
                    fw5.write(arrayBCopy[temp2]+ newLine+ newLine);
                    type1and2[linecount] = Integer.toString(j)+" "+Integer.toString(temp2);
                    linecount++;
                  
                    for (int l = 0; l <= globalLineNum; l++)
                    {
                        for (int m = 0; m <= numberB[l]; m++)
                        {
                                if(groupB[l][m] == temp1 || groupB[l][m] == temp2)
                                groupB[l][m] = 0;
                        }
                    }
                 }                      
                }   
                
                
            }
            
            

        }
        
        out5.close();
            
        } catch (Exception se) {
        System.out.println("Error - " + se.toString());
        
        }
        
        double pctg2B = ((double)noType2B/(double)globalLineNum) *100; //must change to double first
        double pctg2 = (((double)noType2B + (double)noType2A) /(double)globalLineNum) *100;
        
        jTextArea5.append("Pre-Detection of Type 2 (similar B)...done ");  
        jTextArea11.append("Total pairs of Type 2 (similar B) : "+ noType2B + newLine);
        jTextArea11.append("Total pairs of Type 2 : "+ (noType2A + noType2B) + newLine);        
        
        long preDetEndTime = System.currentTimeMillis();  //calculate current time for pool
        DecimalFormat df = new DecimalFormat("#.####"); //set decimal format to 4
        preDetectSeconds = df.format(preDetEndTime - preDetStartTime); //convert float seconds2 to string
        jTextField5.setText(preDetectSeconds + " milliseconds."); //display the running time for pre-processing       
        jProgressBar5.setValue(100);
    }//GEN-LAST:event_jButton5MousePressed

    private void jButton6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MousePressed

    int type3 = 0;
    int type4 = 0;
    int i = 0;
    String temp = "";
    int temp1 = 0;
    int temp2 = 0;
    int temp3 = 0;
    double distance = 0.0;
    DecimalFormat df = new DecimalFormat("#.####"); //set decimal format to 2
    boolean type2 = false;
    int val = 0;
    
    
    long detStartTime = System.currentTimeMillis();
    
            try{
            File temp6 = new File("C: Type3.txt");   //write to file 
            
            FileWriter fw6 = new FileWriter(temp6);
            BufferedWriter out6 = new BufferedWriter(fw6);
    
    
    for(int j = 0; j <= globalLineNum; j++ )
    {
         searchValueA = arrayACopy[j];     
         searchValueB = arrayBCopy[j]; 
         temp1 = j;
            

            for(int k=0; k <= globalLineNum ; k++)
            {
                
                for (int l = 0; l <= numberA[j]; l++)   //make sure not type 2 A same
                {
                    if (k == groupACopy[j][l])
                    {
                        type2 = true;
                    }
                }
                
                for (int l = 0; l <= numberB[j]; l++)   //make sure not type 2 B same
                {
                    if (k == groupBCopy[j][l])
                    {
                        type2 = true;
                    }
                }
                
                
                
                if(searchValueA != null && arrayACopy[k] != null && searchValueB != null && arrayBCopy[k] != null && !searchValueA.equals(arrayACopy[k]) && !searchValueB.equals(arrayBCopy[k]) && j!= k && !(arrayACopy[k].equals("")) && !(arrayBCopy[k].equals(""))) // Not type 1 match
                {

                    
                    if(arrayBCopy[j] != null && arrayACopy[j] != null ) //Not type 2 Same
                    {

                        
                    if(type2 != true) //Not type 2 
                    {
                        
                            if (j!= k && arrayACopy[j] != null && arrayACopy[k] != null && arrayBCopy[j] != null && arrayBCopy[k] != null && !arrayACopy[j].equals("") && !arrayACopy[k].equals(""))
                            {

                           //do euclidean calculation !arrayACopy[j].equals(""), this one is previously
                           //  power of two (  (arrayACopy[j]- arrayACopy[k]) power of two + (arrayBCopy[j]-arrayBCopy[k]) power of two )
                         
                                //chi square distance. 
                                distance = Math.sqrt(0.5*(((Math.pow((Double.parseDouble(arrayACopy[j])-Double.parseDouble(arrayACopy[k])),2))/((Double.parseDouble(arrayACopy[j])+Double.parseDouble(arrayACopy[k]))))+
                                                                        ((Math.pow((Double.parseDouble(arrayBCopy[j])-Double.parseDouble(arrayBCopy[k])),2))/((Double.parseDouble(arrayBCopy[j])+Double.parseDouble(arrayBCopy[k]))))));
                        
                            temp = df.format(distance);
                            distance = Double.parseDouble(temp);

                            if (distance <= 1.5)
                                {
                               
                                    fw6.write(arrayACopy[j]+ newLine);
                                    fw6.write(arrayACopy[k]+ newLine);
                                    fw6.write(arrayBCopy[j]+ newLine);
                                    fw6.write(arrayBCopy[k]+ newLine);
                                    fw6.write("Distance: "+ distance + newLine); 
                                    fw6.write("Line: " + j + " " + k + newLine + newLine); 
                                    type3++;
                                 
                                }
                            else if (distance > 1.5 && distance <10)
                            {
                                type4++;
                            }

                            }
                      
                        
                    }                      
                    }       
                    
                    
                    
                }
                
                type2 = false;
                
            }
            
        
        arrayACopy[j] = null;
        arrayBCopy[j] = null;
      
    }

            out6.close();
            
        } catch (Exception se) {
        System.out.println("Error - " + se.toString());
        
        }
    
    System.out.println("Type 3: " + type3);
    System.out.println("Type 4: " + type4);
    
    long detEndTime = System.currentTimeMillis();
    detectSeconds = df.format(detEndTime - detStartTime); //convert float seconds2 to string
    System.out.println(detectSeconds + " ms");
        
    jTextArea12.append("Detection of Type 3...done "+ newLine);  
    jTextArea12.append("Detection of Type 4...done "+ newLine);
    jTextArea13.append("Type 3: " + type3 + " pairs" + newLine);    
    jTextArea13.append("Type 4: " + type4 + " pairs" +newLine); 
        
    jTextField6.setText(detectSeconds + " milliseconds."); //display the running time for pre-processing       
    jProgressBar6.setValue(100);
    
    
    }//GEN-LAST:event_jButton6MousePressed

       //JFIlechooser main class
    public class MainClass extends JFrame {
        
        public MainClass() {
        
        //Make the filechooser visible    
        JFileChooser fileChooser = new JFileChooser();
        //show current directories
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Choose a file");
        this.getContentPane().add(fileChooser);
        fileChooser.setVisible(true);
        
        //enable multi files selections
        fileChooser.setMultiSelectionEnabled(true);
        
        //Determine the approve, cancel, and error option action
        int result = fileChooser.showOpenDialog(null);
        switch (result) {
        case JFileChooser.APPROVE_OPTION:
        System.out.println("Approve (Open or Save) was clicked");
        
        //put selected files into files array
        files = fileChooser.getSelectedFiles();
        //System.out.println(Arrays.toString(files));
        break;
        case JFileChooser.CANCEL_OPTION:
        System.out.println("Cancel or the close-dialog icon was clicked");
        break;
        case JFileChooser.ERROR_OPTION:
        System.out.println("Error");
        break;
    }
            
    }   }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TokenBeta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TokenBeta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TokenBeta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TokenBeta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TokenBeta().setVisible(true);
            }
        });
        
        for (int i = 0; i < 2000; i++)
        {
            numberA [i] = 0;   //initialize array
            numberB [i] = 0;
        }

        while (determiner != true){               //pause main method to wait for jfilechooser
            
            try {
                while (determiner != true){
                Thread.sleep(1000);
                }//1000 milliseconds is one second sleep.
                } catch(InterruptedException ex) {
                Thread.currentThread().interrupt();
                }
            } //to stop execution before selecting files or to wait for files being selected in Filechooser UI
        
        try {
            for (File listOfFile : files) {

                if (listOfFile.isFile()) { //check selected file one by one
                    stringFiles = listOfFile.getPath();
                    // Read only java files
                    if (stringFiles.endsWith(".java")) {
                        // Read file

                        FileInputStream fins = new FileInputStream(listOfFile);

                        
                        try {
                        File source = new File(stringFiles);
                        File temp = new File(stringFiles + ".txt");

                        FileReader fr = new FileReader(source);
                        BufferedReader in = new BufferedReader(fr);

                        FileWriter fw = new FileWriter(temp);
                        BufferedWriter out = new BufferedWriter(fw);

                                             
                        boolean eof = false;
                        do {
                        readline = in.readLine();
                        
                        if (readline != null) {
                        
                         readline = readline.trim(); // remove leading and trailing whitespace
                         //Preprocessing rules--start
                         long preStartTime = System.currentTimeMillis();  //calculate current time for preprocessing
                         
                            if (readline.length() == 0) {
 //                               System.out.println(readline + "cont1");   // which rule used
                                pr3 = "Emptyline removal...done";
                                continue; // Remove emptyline
                            }
                            if (readline.startsWith("import") || readline.startsWith("package")) {
 //                               System.out.println(readline + "cont2");
                                pr1 = "Package and Import Statements removal...done" + newLine;
                                continue; // Remove packages and imports
                            }
                            if (readline.contains("//")) {
 //                               System.out.println(readline + "cont3");
                                pr2 = "Comments removal...done" + newLine;
                                continue; // Remove comments  
                            }
                            if (readline.startsWith("*") || readline.startsWith("/ ") || readline.startsWith("//")) {
 //                               System.out.println(readline + "cont4");
                                pr2 = "Comments removal...done" + newLine;
                                continue;    // Remove comments
                            }
                            if (readline.startsWith("/*") && readline.endsWith("*/") || readline.startsWith("/*") || readline.endsWith("*")) {
 //                               System.out.println(readline + "cont5");
                                pr2 = "Comments removal...done" + newLine;
                                continue;  // Remove comments
                            }
                            if (readline.startsWith("//") || readline.contains("*")) {
//                                System.out.println(readline + "cont6");
                                pr2 = "Comments removal...done" + newLine;
                                continue; // Remove comments   
                            }
                            
                       // readline = readline.replaceAll("\"", " ");
                            
                            // Preprocessing rules ---end
                        long preEndTime = System.currentTimeMillis(); //calculate end time of preprocessing
                        // change to second    seconds = (endTime - startTime) / 1000F;
                        
                        
                        if (readline.startsWith("public"))
                        {
                            jTextArea6.append(newLine + readline); 
                        }
                        else
                        {
                        jTextArea6.append(readline);  //write to jtextfield6
                        }
                        secondstemp = (preEndTime - preStartTime); //hold temporary time for preprocessing
                        seconds = seconds + secondstemp; //adds all preprocessing time in the loop
     
               
                            if (readline.contains("public")) {
                                
                               out.write (newLine); // Add separator for line write
                               out.write (newLine); // Add separator for line write
                               }
                         

                            
                        out.write(readline);
                        } else
                        eof = true;
                        } while (!eof);
                        
                        in.close();
                        out.close();

                        boolean deleted = source.delete();
                        if (deleted)
                        temp.renameTo(source);
                        } catch (Exception se) {
                        System.out.println("Error - " + se.toString());
                        }
                        


                }
                        DecimalFormat df = new DecimalFormat("#.####"); //set decimal format to 4
                        preSeconds = df.format(seconds); //convert float seconds to string
                
                        //to write parameterization code
                        
  
                    
                    
                }
                        
                        
                        
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
        
        
        
        
        jTextArea1.append(pr1);
        jTextArea1.append(pr2);
        jTextArea1.append(pr3);
        jTextField1.setText(preSeconds + " milliseconds."); //display the running time for pre-processing
        jProgressBar1.setValue(100);
        
        


        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JProgressBar jProgressBar3;
    private static javax.swing.JProgressBar jProgressBar4;
    private static javax.swing.JProgressBar jProgressBar5;
    private javax.swing.JProgressBar jProgressBar6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea10;
    private javax.swing.JTextArea jTextArea11;
    private javax.swing.JTextArea jTextArea12;
    private javax.swing.JTextArea jTextArea13;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private static javax.swing.JTextArea jTextArea6;
    private static javax.swing.JTextArea jTextArea7;
    private static javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextArea jTextArea9;
    private static javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
