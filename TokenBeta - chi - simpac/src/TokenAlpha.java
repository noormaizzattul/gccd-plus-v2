/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Dimension;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import java.awt.Dimension;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

/**
 *
 * @author Hariz
 */
public class TokenAlpha extends javax.swing.JFrame {

    static String newLine = System.getProperty("line.separator"); ////This will retrieve line separator dependent on OS.
    static String preSeconds; //for preprocessing
    static String transSeconds; //for transformation
    static float seconds = 0; // for preprocessing
    static float secondstemp; // for preprocessing
    static float seconds2 = 0; // for transformation
    static float secondstemp2; // for transformation

    static String pr1 = "Package and Import Statements not done" + newLine; //holds result pr
    static String pr2 = "Comments removal not done" + newLine; //holds result pr
    static String pr3 = "Emptyline removal not done"; //holds result pr
    
    static String tr1 = "Keywords regularization not done" + newLine; //holds result tr
    static String tr2 = "Function regularization not done" + newLine; //holds result tr
    static String tr3 = "Convertion to lowercase not done"; //holds result tr
    //create files array that can store 1000 files at max
    static File[] files = new File[1000];
    static boolean determiner = false; //to stop execution in PartOneTokenizeJavaFile.main before selecting files in FileChooser
    static String transText = ""; //string to hold transformation text
    static String paraText = ""; //string to hold parameterization text
    static String tempLine = ""; // to hold string for readline to change to lowercase
    static String readline = "";
    static int countLine = 0;
    /**
     * Creates new form TokenBeta
     */
    public TokenAlpha() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jProgressBar3 = new javax.swing.JProgressBar();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Al Fahim V.1"));

        jButton1.setText("Pre-process");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        jButton2.setText("Transform");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Parameterize");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });

        jButton4.setText("Detect");

        jButton5.setText("Visualize");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane5.setViewportView(jTextArea5);

        jLabel1.setText("Run Time:");

        jLabel2.setText("Run Time:");

        jLabel7.setText("Run Time:");

        jLabel8.setText("Run Time:");

        jLabel10.setText("Run Time:");

        jTextArea6.setColumns(20);
        jTextArea6.setRows(5);
        jScrollPane6.setViewportView(jTextArea6);

        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jScrollPane7.setViewportView(jTextArea7);

        jTextArea8.setColumns(20);
        jTextArea8.setRows(5);
        jScrollPane8.setViewportView(jTextArea8);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane7)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane2)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane3)))
                        .addComponent(jScrollPane8)))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextField1, jTextField2, jTextField3, jTextField4});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2, jScrollPane3, jScrollPane4, jScrollPane5});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane7, jScrollPane8});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jProgressBar1, jProgressBar2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed

        try {
            Thread.sleep(500); //sleep 500 milliseconds to wait for progress bar
            jProgressBar2.setValue(50);
            Thread.sleep(1500); //sleep 1000 milliseconds to wait for progress bar
            jProgressBar2.setValue(100);
            //1000 milliseconds is one second sleep.
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }

        jTextArea2.append(tr1); //display to textarea1
        jTextArea2.append(tr2);
        jTextArea2.append(tr3);        
        jTextArea7.append(transText); //display latest code up down on text area 6
        
        jTextField2.setText(transSeconds + " milliseconds."); //display the running time for pre-processing
        
    }//GEN-LAST:event_jButton2MousePressed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed

        //Make the jframe that hold the filechooser visible
        JFrame frame = new MainClass();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.pack();
        frame.setVisible(true);
        determiner = true;

    }//GEN-LAST:event_jButton1MousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
        jTextArea8.append(paraText);  
    }//GEN-LAST:event_jButton3MousePressed

       //JFIlechooser main class
    public class MainClass extends JFrame {
        
        public MainClass() {
        
        //Make the filechooser visible    
        JFileChooser fileChooser = new JFileChooser();
        //show current directories
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Choose a file");
        this.getContentPane().add(fileChooser);
        fileChooser.setVisible(true);
        
        //enable multi files selections
        fileChooser.setMultiSelectionEnabled(true);
        
        //Determine the approve, cancel, and error option action
        int result = fileChooser.showOpenDialog(null);
        switch (result) {
        case JFileChooser.APPROVE_OPTION:
        System.out.println("Approve (Open or Save) was clicked");
        
        //put selected files into files array
        files = fileChooser.getSelectedFiles();
        //System.out.println(Arrays.toString(files));
        break;
        case JFileChooser.CANCEL_OPTION:
        System.out.println("Cancel or the close-dialog icon was clicked");
        break;
        case JFileChooser.ERROR_OPTION:
        System.out.println("Error");
        break;
    }
            
    }   }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TokenBeta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TokenBeta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TokenBeta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TokenBeta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TokenBeta().setVisible(true);
            }
        });
        

        String stringFiles;
        File[] listOfFiles;

        while (determiner != true){
            
            try {
                while (determiner != true){
                Thread.sleep(1000);
                }//1000 milliseconds is one second sleep.
                } catch(InterruptedException ex) {
                Thread.currentThread().interrupt();
                }
            } //to stop execution before selecting files or to wait for files being selected in Filechooser UI
        
        try {
            for (File listOfFile : files) {

                if (listOfFile.isFile()) { //check selected file one by one
                    stringFiles = listOfFile.getPath();
                    // Read only java files
                    if (stringFiles.endsWith(".java")) {
                        // Read file

                        FileInputStream fins = new FileInputStream(listOfFile);
 //                       System.out.println("is + " + listOfFile);  see name of file selected
//                        System.out.println("is + " + stringFiles); see name of file selected
                        
                        try {
                        File source = new File(stringFiles);
                        File temp = new File(stringFiles + ".tmp");

                        FileReader fr = new FileReader(source);
                        BufferedReader in = new BufferedReader(fr);

                        FileWriter fw = new FileWriter(temp);
                        BufferedWriter out = new BufferedWriter(fw);

                                             
                        boolean eof = false;
                        do {
                        readline = in.readLine();
                        
                        if (readline != null) {
                        
                         readline = readline.trim(); // remove leading and trailing whitespace
                         //Preprocessing rules--start
                         long preStartTime = System.currentTimeMillis();  //calculate current time for preprocessing
                         
                            if (readline.length() == 0) {
 //                               System.out.println(readline + "cont1");   // which rule used
                                pr3 = "Emptyline removal done";
                                continue; // Remove emptyline
                            }
                            if (readline.startsWith("import") || readline.startsWith("package")) {
 //                               System.out.println(readline + "cont2");
                                pr1 = "Package and Import Statements removal done" + newLine;
                                continue; // Remove packages and imports
                            }
                            if (readline.contains("//")) {
//                                System.out.println(readline + "cont3");
                                pr2 = "Comments removal done" + newLine;
                                continue; // Remove comments  
                            }
                            if (readline.startsWith("*") || readline.startsWith("/ ") || readline.startsWith("//")) {
 //                               System.out.println(readline + "cont4");
                                pr2 = "Comments removal done" + newLine;
                                continue;    // Remove comments
                            }
                            if (readline.startsWith("/*") && readline.endsWith("*/") || readline.startsWith("/*") || readline.endsWith("*")) {
 //                               System.out.println(readline + "cont5");
                                pr2 = "Comments removal done" + newLine;
                                continue;  // Remove comments
                            }
                            if (readline.startsWith("//") || readline.contains("*")) {
//                                System.out.println(readline + "cont6");
                                pr2 = "Comments removal done" + newLine;
                                continue; // Remove comments   
                            }
                            
                            
                            // Preprocessing rules ---end
                        long preEndTime = System.currentTimeMillis(); //calculate end time of preprocessing
                        // change to second    seconds = (endTime - startTime) / 1000F;
                        
                        jTextArea6.append(readline + newLine);  //write to jtextfield6
                        
                        secondstemp = (preEndTime - preStartTime); //hold temporary time for preprocessing
                        seconds = seconds + secondstemp; //adds all preprocessing time in the loop
      
                             
                            //   Transformation rules --- Start
                        
                        long transStartTime = System.currentTimeMillis();  //calculate current time for transformation
                        
                                tempLine = readline.toLowerCase();  //change all to lower case
                                readline = tempLine; //copy tempLine to readline
                                tr3 = "Convertion to lowercase done";
                                
                        
                            if (readline.contains("string ") ) {
 //                               readline = readline.replace("String", "[S]");  // Remove String with [S] 
                                readline = readline.replace("string ", "[S] ");
                                tr1 = "Keywords regularization done" + newLine;
                            }
                            if (readline.contains("int ")) // Remove int with [I]
                            {
                                readline = readline.replace("int ", "[I] ");    
                                tr1 = "Keywords regularization done" + newLine;
                            }
                            if (readline.contains("char ")) {
                                readline = readline.replace("char ", "[C] ");  // Remove char with [C]
                                tr1 = "Keywords regularization done" + newLine;
                            }
                            if (readline.contains("double ")) {
                                readline = readline.replace("double ", "[D] ");  // Remove double with [D]
                                tr1 = "Keywords regularization done" + newLine;
                            }
                            if (readline.contains("float ")) {
                                readline = readline.replace("float ", "[F] ");  // Remove float with [F]
                                tr1 = "Keywords regularization done" + newLine;
                            }
                            if (readline.contains("protected ")) {
                                readline = readline.replace("protected ", "public "); // Standardize access function to public
                                tr2 = "Functions regularization done" + newLine;
                            }
                            if (readline.contains("private ")) {
                                readline = readline.replace("private ", "public ");  // Standardize access function to public
                                tr2 = "Functions regularization done" + newLine;
                            }
                            // Transformation rules -- End

                            long transEndTime = System.currentTimeMillis(); //calculate end time of transformation
                            
                            transText = transText + readline + newLine; //copy & add the code to transtext
                            secondstemp = (transEndTime - transStartTime); //hold temporary time for transformation
                            seconds2 = seconds2 + secondstemp; //adds all transformation time in the loop
     
                            
                         //   readline = readline.trim();   
                            
                            if (readline.contains("public")) {
                                
                                out.write (newLine); // Add separator for line write
                                out.write (newLine); // Add separator for line write
                               }
                         //
                    if (readline.startsWith("public")) {

                    countLine = countLine + 1;

                    readline = readline.replace("=", "");
                    readline = readline.replace("()", "");
                    readline = readline.replace("{", "");
                    readline = readline.replace("}", "");
                    readline = readline.replace(",", "");
                    readline = readline.replace(".", "");
                    readline = readline.replace("_", "");
                    readline = readline.replace("!", "");
                    readline = readline.replace("<", "");
                    readline = readline.replace(">", "");
                    readline = readline.replace("&&", "");
                    readline = readline.replace("&", "");
                    readline = readline.replace("==", "");

                    readline = readline.replace("[S]", "31");
                    readline = readline.replace("[I]", "32");
                    readline = readline.replace("[C]", "33");
                    readline = readline.replace("[D]", "34");
                    readline = readline.replace("[F]", "35");
                    readline = readline.replace("[s]", "31");
                    readline = readline.replace("[i]", "32");
                    readline = readline.replace("[c]", "33");
                    readline = readline.replace("[d]", "34");
                    readline = readline.replace("[f]", "35");

                    readline = readline.replace("a", "01");
                    readline = readline.replace("b", "02");
                    readline = readline.replace("c", "03");
                    readline = readline.replace("d", "04");
                    readline = readline.replace("e", "05");
                    readline = readline.replace("f", "06");
                    readline = readline.replace("g", "07");
                    readline = readline.replace("h", "08");
                    readline = readline.replace("i", "09");
                    readline = readline.replace("j", "10");
                    readline = readline.replace("k", "11");
                    readline = readline.replace("l", "12");
                    readline = readline.replace("m", "12");
                    readline = readline.replace("n", "14");
                    readline = readline.replace("o", "15");
                    readline = readline.replace("p", "16");
                    readline = readline.replace("q", "17");
                    readline = readline.replace("r", "18");
                    readline = readline.replace("s", "19");
                    readline = readline.replace("t", "20");
                    readline = readline.replace("u", "21");
                    readline = readline.replace("v", "22");
                    readline = readline.replace("w", "23");
                    readline = readline.replace("x", "24");
                    readline = readline.replace("y", "25");
                    readline = readline.replace("z", "26");

                    tempLine = readline.replaceAll("\\s+", "");
                    readline = tempLine;

                    paraText = paraText + readline + newLine;                 
 //                   for (int i = 0; i < readline.length(); i++) {
 //                      
//
                    }

                    //System.out.println(countLine + "\t" + originalLine + "\t" + inputLine +"\n");
                    //System.out.println(countLine + "\t" + wordcount + "\n");
                            
                            
                        out.write(readline);
                        } else
                        eof = true;
                        } while (!eof);
                        
                        in.close();
                        out.close();

                      


                        boolean deleted = source.delete();
                        if (deleted)
                        temp.renameTo(source);
                        } catch (Exception se) {
                        System.out.println("Error - " + se.toString());
                        }
                        
                        //
  //                      DataInputStream din = new DataInputStream(fins);
  //                      BufferedReader bfr = new BufferedReader(new InputStreamReader(din));
                        // Read line by line. 
                        

                    
                }
                        DecimalFormat df = new DecimalFormat("#.####"); //set decimal format to 4
                        preSeconds = df.format(seconds); //convert float seconds to string
                        transSeconds = df.format(seconds2); //convert float seconds2 to string
 //                       System.out.println(preSeconds);  //prints to 4 decimals
  //                      System.out.println(transSeconds); //prints to 4 decimals
                
                        //to write parameterization code
                        
  
                    
                    
                }
                        
                        
                        
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
        
        jTextArea1.append(pr1);
        jTextArea1.append(pr2);
        jTextArea1.append(pr3);
        jTextField1.setText(preSeconds + " milliseconds."); //display the running time for pre-processing
        jProgressBar1.setValue(100);

        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JProgressBar jProgressBar3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private static javax.swing.JTextArea jTextArea6;
    private static javax.swing.JTextArea jTextArea7;
    private static javax.swing.JTextArea jTextArea8;
    private static javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
